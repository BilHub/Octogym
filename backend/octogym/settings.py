"""
Django settings for octogym project.

Generated by 'django-admin startproject' using Django 3.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import os
from pathlib import Path
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'ik$iph#)h5a9r0tu08dx+nc2bp$w=k8j_3p)f&716^gh9v^yta'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    'client.apps.ClientConfig',
    'assurance.apps.AssuranceConfig',
    'abonnement.apps.AbonnementConfig',
    'materiel.apps.MaterielConfig',
    'salle_activite.apps.SalleActiviteConfig',
    'creneau.apps.CreneauConfig',
    'presence.apps.PresenceConfig',
    'salle_sport.apps.SalleSportConfig',
    'planning.apps.PlanningConfig',
    'transaction.apps.TransactionConfig',
    # 'authentification.apps.AuthentificationConfig',
    'authapp',
    'rest_framework',
    # 'rest_framework.authtoken',
    # 'rest_auth',
    # 'allauth', 
    # 'allauth.account', 
    # 'django.contrib.sites',
    # 'allauth.socialaccount', 
    # 'rest_auth.registration', 
    'debug_toolbar',
    'corsheaders',
    'drf_multiple_model',
    'import_export',
    'djoser',
    'django_filters',
    'schema_graph',#SCHEMA
    'rest_framework_simplejwt.token_blacklist',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        # 'rest_framework.permissions.AllowAny',
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
    'TIME_FORMAT':  '%H:%M',
    'DATETIME_FORMAT': '%d %m %Y %H:%M', 
    # 'DATE_FORMAT': "%d-%m-%Y",
    # 'DEFAULT_PAGINATION_CLASS': 'apps.core.pagination.StandardResultsSetPagination',
    # 'PAGE_SIZE': 20,
}
# DATE_INPUT_FORMATS = ['%d-%m-%Y']

SIMPLE_JWT = {
    # refresh token is set to update every 4 minutes from the frontend
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=90),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'AUTH_HEADER_TYPES': ('JWT',),
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware', #DJango debug toolbar
    'corsheaders.middleware.CorsMiddleware',# third party
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

ROOT_URLCONF = 'octogym.urls'

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'build'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'octogym.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'fr'

TIME_ZONE = 'Africa/Algiers'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/
CORS_ORIGIN_ALLOW_ALL = True
# CORS_URLS_REGEX = r'^/api/.*$'

STATIC_URL = '/static/'
STATICFILES_DIRS = [
   BASE_DIR / 'build/static',
]
MEDIA_URL = '/media/'

MEDIA_ROOT = BASE_DIR / 'media'
STATIC_ROOT =  os.path.join(BASE_DIR, 'assets')

INTERNAL_IPS = [
    # ...
    '127.0.0.1',
    # '192.168.1.8',
    # '192.168.1.8:8000',
    # ...
]

AUTH_USER_MODEL = 'authapp.CustomUser'

DJOSER = {
    # 'LOGIN_FIELD': 'username',
    'USER_CREATE_PASSWORD_RETYPE': True,
    # 'USERNAME_CHANGED_EMAIL_CONFIRMATION': True,
    # 'PASSWORD_CHANGED_EMAIL_CONFIRMATION': True,
    # 'SEND_CONFIRMATION_EMAIL': True,
    # 'SET_USERNAME_RETYPE': True,
    # 'SET_PASSWORD_RETYPE': True,
    # 'PASSWORD_RESET_CONFIRM_URL': 'password/reset/confirm/{uid}/{token}',
    # 'USERNAME_RESET_CONFIRM_URL': 'email/reset/confirm/{uid}/{token}',
    # 'ACTIVATION_URL': 'activate/{uid}/{token}',
    # 'SEND_ACTIVATION_EMAIL': True,
    'SERIALIZERS': {
        'user_create': 'authapp.serializers.UserCreateSerializer',
        'user': 'authapp.serializers.UserCreateSerializer',
    }
} 

# from django.shortcuts import render
# # Create your views here.
# # from rest_framework import generics, permissions
# from django.views.decorators.csrf import csrf_exempt
# from rest_framework.parsers import JSONParser
# from django.http import JsonResponse
# from django.db import IntegrityError
# from django.contrib.auth.models import User
# from rest_framework.authtoken.models import Token
# from django.contrib.auth import authenticate

# @csrf_exempt
# def signup(request):
#     if request.method == 'POST':
#         try:
#             data = JSONParser().parse(request)
#             user = User.objects.create_user(data['username'], password=data['password'])
#             user.save()
#             token = Token.objects.create(user=user)
#             return JsonResponse({'token':str(token)}, status=201)
#         except IntegrityError:
#             return JsonResponse({'error':'That username has already been taken. Please choose a new username'}, status=400)

# # @csrf_exempt
# # def login(request):
# #     if request.method == 'POST':
# #         data = JSONParser().parse(request)
# #         user = authenticate(request, username=data['username'], password=data['password'])
# #         if user is None:
# #             return JsonResponse({'error':'Could not login. Please check username and password'}, status=400)
# #         else:
# #             try:
# #                 token = Token.objects.get(user=user)
# #             except:
# #                 token = Token.objects.create(user=user)
# #             return JsonResponse({'token':str(token)}, status=200)

AUTHENTICATION_BACKENDS = (
    ('django.contrib.auth.backends.ModelBackend'),
)